// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  location      String?
  waterResourse String?
  latitude      Float?
  longitude     Float?
  farmSize      Float?
  cropType      String?  // Main crop type
  currentCrop   String?  // Additional crop currently being grown
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  dataSets      DataSet[]
  accounts      Account[]
  Chats         Chat[]
  recommendation Recommendation[]
  context       Context[]

  @@unique([email])
  @@map("user")
}


model Recommendation {
  id          String   @id @default(cuid())
  userId      String
  what     String   
  why      String  
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}


model Chat {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  userId    String
  user      User @relation(fields: [userId], references: [id],onDelete: Cascade)
  messages  Message[]
}

model Message {
  id        String   @id @default(cuid())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id],onDelete: Cascade)
  role      String   // "user" or "model"
  content   String
  createdAt DateTime @default(now())
}




model Context {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  userId    String
  user      User @relation(fields: [userId], references: [id],onDelete: Cascade)
  contextMessages  ContextMessage[]
}

model ContextMessage {
  id        String   @id @default(cuid())
  chatId    String
  context    Context     @relation(fields: [chatId], references: [id],onDelete: Cascade)
  role      String   // "user" or "model"
  content   String
  createdAt DateTime @default(now())
}



model DataSet{
  id String @default(uuid()) @id
  filename String?
  fileURL String
  description String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}
model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
